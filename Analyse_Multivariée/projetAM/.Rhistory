plot
azser
flute74
1=1
1==1
a=1
a
a=2
a
a==1
a==2
q()
altitude=read.table("altitude.txt", header=TRUE);
tabmil4=tabmil;
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
install.packages("ade4")
;
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
setwd("~/MABS/Analyse_Multivariée/projetAM")
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil
altitude
tabtraits
tabsp
# Table Milieu -> Altitude 376 x 2
altitude
# Table Espèces -> Taille 98 x 5
tabtraits[,15:19]
tabEspSize = tabtraits[,15:19];
tabEspSize
# Table Milieu -> Taille 376 x 5
tabMilSize = matrix(0, nrow=376, ncol=5) ;
colnames(tabMilSize) <- colnames(tabEspSize)
rownames(tabMilSize) <- rownames(altitude)
tabMilSize
for(i in 1:376) {
for(j in 1:98){
if(tabsp[i,j]==1){
k=1;
while(k<5 && tabEspSize[j,k]==0){
k=k+1;
}
tabMilSize[i,k]=tabMilSize[i,k]+1;
}
}
};
tabMilSize
altName=c()
alt=0;
nbAlt=0;
for(i in 1:376) {
if(altitude[i,]>alt)
{
alt=altitude[i,];
# créer un vecteur pour nommer les lignes(altitudes)
altName=append(altName,alt ,after=length(altName));
nbAlt=nbAlt+1;
}
};
nbAlt
altName
# On trouve 183 Altitude différentes
# Table Altitude -> Taille 183 x 5
tabAltSize = matrix(0, nrow=183, ncol=5) ;
colnames(tabAltSize) <- colnames(tabEspSize);
rownames(tabAltSize) <- altName;
tabAltSize[183,5]
alt=0;
nbAlt=0;
for(i in 1:376) {
for(k in 1:5){
if(altitude[i,]>alt)
{
alt=altitude[i,];
nbAlt=nbAlt+1;
}
tabAltSize[nbAlt,k]=tabAltSize[nbAlt,k]+tabMilSize[i,k];
}
};
tabAltSize
tabAltSize
res=chisq.test();
res=chisq.test(tabAltSize);
res$expected
res
tabAltSize
res
afc1=dudi.coa(tabAltSize);
name(afc1);
names(afc1);
sum(afc1$eig)*sum(tabAltSize);
afc1$eig[1]/sum(afc1$eig)+afc1$eig[2]/sum(afc1$eig)
afc1$eig[1]/sum(afc1$eig)+afc1$eig[2]/sum(afc1$eig)# 70% d'info conservée
scatter(afc1);
score(afc1);
afc1
data(ours)
ours
tabMilSize
tabmil
tabmil4=tabmil;
tabmil2=tabmil[,2:14];
tabmil=cbind(tabmil2, altitude);
tabmil
tabmil4
tabmil2
tabmil
ours
tabmil;
tabAlt
altitude[376]
altitude[,376]
altitude[1,376]
altitude[2,376]
altitude
altitude[376]
altitude[375]
altitude[2,375]
altitude[2,1:375]
altitude[1:375]
altitude[375,]
tailleGroup = altitude[375,]-altitude[1,]/5;
tailleGroup
tailleGroup = (altitude[375,]-altitude[1,])/5;
tailleGroup
12%%3
12%%5
2000/442
600/442
altitude[375,]-altitude[1,]
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
tabmil$Alti
tabmil$Alti[376]
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = tabmil$Alti[i]-limiteBasse;
tabmilTranch$Alti[i]=trancheAlt;
};
tabmilTranch;
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round(tabmil$Alti[i]-limiteBasse/5);
tabmilTranch$Alti[i]=trancheAlt;
};
tabmilTranch;
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil$Alti[i]-limiteBasse)/5);
tabmilTranch = tabmil;
tabmilTranch$Alti[i]=trancheAlt;
};
tabmilTranch;
limiteBasse
round((tabmil$Alti[1]-limiteBasse)/5);
round((tabmil$Alti[65]-limiteBasse)/5);
tabmil$Alti[65]
limiteBasse
tabmil$Alti[i]-limiteBasse
tabmil$Alti[1]-limiteBasse
tabmil$Alti[30]-limiteBasse
tabmil$Alti[65]
tabmil$Alti[30]-limiteBasse
round((tabmil$Alti[85]-limiteBasse)/5);
tabmil$Alti[85]
tabmil$Alti[140]
tabmil$Alti[140]-limiteBasse
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil$Alti[i]-limiteBasse)/tailleGroup);
tabmilTranch$Alti[i]=trancheAlt;
};
tabmilTranch;
acm1=dudi.acm(tabmilTranch)
ours
tabmilTranch
acm1=dudi.acm(tabmilTranch);
