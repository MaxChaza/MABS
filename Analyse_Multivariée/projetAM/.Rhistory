q()
install.packages("ade4");
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil4=tabmil;
tabmil2=tabmil[,2:14];
tabmil=cbind(tabmil2, altitude);
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
setwd("~/MABS/Analyse_Multivariée/projetAM")
setwd("~/MABS/Analyse_Multivariée/projetAM");
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil4=tabmil;
tabmil2=tabmil[,2:14];
tabmil=cbind(tabmil2, altitude);
tabmil
altitude
tabtraits
# Table Milieu -> Présence espèce 376 x 98
tabsp
# Table Milieu -> Altitude 376 x 2
altitude
# Table Espèces -> Taille 98 x 5
tabEspSize = tabtraits[,15:19];
tabtraits[,15:19]
tabEspSize
# Table Milieu -> Taille 376 x 5
tabMilSize = matrix(0, nrow=376, ncol=5) ;
colnames(tabMilSize) <- colnames(tabEspSize)
rownames(tabMilSize) <- rownames(altitude)
tabMilSize
for(i in 1:376) {
for(j in 1:98){
if(tabsp[i,j]==1){
k=1;
while(k<5 && tabEspSize[j,k]==0){
k=k+1;
}
tabMilSize[i,k]=tabMilSize[i,k]+1;
}
}
};
tabMilSize
# Trouver le nombre d'altitude différents par milieu
altName=c()
alt=0;
nbAlt=0;
for(i in 1:376) {
if(altitude[i,]>alt)
{
alt=altitude[i,];
# créer un vecteur pour nommer les lignes(altitudes)
altName=append(altName,alt ,after=length(altName));
nbAlt=nbAlt+1;
}
};
nbAlt
altName
# On trouve 183 Altitude différentes
# Table Altitude -> Taille 183 x 5
tabAltSize = matrix(0, nrow=183, ncol=5) ;
colnames(tabAltSize) <- colnames(tabEspSize);
rownames(tabAltSize) <- altName;
tabAltSize[183,5]
alt=0;
nbAlt=0;
for(i in 1:376) {
for(k in 1:5){
if(altitude[i,]>alt)
{
alt=altitude[i,];
nbAlt=nbAlt+1;
}
tabAltSize[nbAlt,k]=tabAltSize[nbAlt,k]+tabMilSize[i,k];
}
};
tabAltSize
# Test de chi2 test si on peut dire que les variables sont independantes
res=chisq.test(tabAltSize);
res$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
res; # p-value = 9.692e-05 < 0.05 on ne peut pas dire que les variables sont indépendantes.
# AFC
afc1=dudi.coa(tabAltSize);
names(afc1);
sum(afc1$eig)*sum(tabAltSize);
afc1$eig[1]/sum(afc1$eig)+afc1$eig[2]/sum(afc1$eig);# 70% d'info conservée
scatter(afc1);# On voit ici la participation de chaque variable à l'effet de dépendance
# ACM -> Pour trouver la position des individus qui maximise les pourcentages
# de varible expliquée,en moyenne, pour toutes les variables quantitatives
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil$Alti[i]-limiteBasse)/tailleGroup);
tabmilTranch$Alti[i]=trancheAlt;
};
tabmilTranch;
# Convertir les données en factors
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$roch <- factor(tabmilTranch$roch)
tabmilTranch <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch;
for(i in 1:376) {
trancheAlt = round((tabmil$Alti[i]-limiteBasse)/tailleGroup);
tabmilTranch$Alti[i]=trancheAlt;
};
for(i in 1:376) {
trancheAlt = round((tabmil$Alti[i]-limiteBasse)/tailleGroup);
tabmilTranch$Alti[i]=trancheAlt;
};
tabmil
tabmil
for(i in 1:376) {
trancheAlt = round((tabmil[14][i]-limiteBasse)/tailleGroup);
tabmilTranch$[14][i]=trancheAlt;
};
tabmil
for(i in 1:376) {
trancheAlt = round((tabmil[14][i]-limiteBasse)/tailleGroup);
tabmilTranch$[14][i]=trancheAlt;
};
tabmil[14][i]
trancheAlt = round((tabmil[14][i]-limiteBasse)/tailleGroup);
tabmilTranch$[14][i]=trancheAlt;
for(i in 1:376) {
trancheAlt = round((tabmil[14][i]-limiteBasse)/tailleGroup);
};
tabmilTranch[14][i]=trancheAlt;
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[14][i]-limiteBasse)/tailleGroup);
tabmilTranch[14][i]=trancheAlt;
};
tabmil[14][0]
tabmil[14][1]
tabmil[14][3]
tabmil[4][14]
tabmil[4][13]
tabmil[13][4]
tabmil
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[14,i]-limiteBasse)/tailleGroup);
tabmilTranch[14,i]=trancheAlt;
};
tabmil[14,i]
tabmil[i,14]
tabmilTranch = tabmil;
nbAlt=0;
tabmil[i,14]
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
# Convertir les données en factors
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$roch <- factor(tabmilTranch$roch)
tabmilTranch$habi <- factor(tabmilTranch$habi)
tabmilTranch$neig <- factor(tabmilTranch$neig)
tabmilTranch$pent <- factor(tabmilTranch$pent)
tabmilTranch$eau <- factor(tabmilTranch$eau)
tabmilTranch$arbrp <- factor(tabmilTranch$arbrp)
tabmilTranch$arbrf <- factor(tabmilTranch$arbrf)
tabmilTranch$arbup <- factor(tabmilTranch$arbup)
tabmilTranch$arbuf <- factor(tabmilTranch$arbuf)
tabmilTranch$buip <- factor(tabmilTranch$buip)
tabmilTranch$buif <- factor(tabmilTranch$buif)
tabmilTranch$herb <- factor(tabmilTranch$herb)
tabmilTranch$Alti <- factor(tabmilTranch$Alti)
acm1=dudi.acm(tabmilTranch);
acm2=dudi.acm(tabmilTranch);
acm2=dudi.acm(tabmilTranch);
names(acm3);
acm3=dudi.acm(tabmilTranch);
names(acm3);
names(acm2);
scatter.dudi(acm3);
scatter.dudi(acm2);
scatter.dudi(acm3);
scatter(acm2);
acm$cr
acm2$cr
