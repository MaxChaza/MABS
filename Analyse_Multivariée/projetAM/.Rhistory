tabtraits
tabmil
tabsp
tabsp[,376]
tabsp[376,]
tabMilSize
altitude
# Trouver le nombre d'altitude différents par milieu
altName=c()
alt=0;
nbAlt=0;
for(i in 1:376) {
if(altitude[i,]>alt)
{
alt=altitude[i,];
# créer un vecteur pour nommer les lignes(altitudes)
altName=append(altName,alt ,after=length(altName));
nbAlt=nbAlt+1;
}
};
nbAlt
altName
tabAltSize = matrix(0, nrow=183, ncol=5) ;
colnames(tabAltSize) <- colnames(tabEspSize);
rownames(tabAltSize) <- altName;
tabAltSize[183,5]
alt=0;
nbAlt=0;
for(i in 1:376) {
for(k in 1:5){
if(altitude[i,]>alt)
{
alt=altitude[i,];
nbAlt=nbAlt+1;
}
tabAltSize[nbAlt,k]=tabAltSize[nbAlt,k]+tabMilSize[i,k];
}
};
tabAltSize
# Test de chi2 test si on peut dire que les variables sont independantes
res=chisq.test(tabAltSize);
res$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
res; # p-value = 9.692e-05 < 0.05 on ne peut pas dire que les variables sont indépendantes.
# AFC
afc1=dudi.coa(tabAltSize);
names(afc1);
sum(afc1$eig)*sum(tabAltSize);
afc1$eig[1]/sum(afc1$eig)+afc1$eig[2]/sum(afc1$eig);# 70% d'info conservée
scatter(afc1);# On voit ici la participation de chaque variable à l'effet de dépendance
# ACM -> Pour trouver la position des individus qui maximise les pourcentages
# de varible expliquée,en moyenne, pour toutes les variables quantitatives
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch$;
tabmilTranch;
tabmil$roch[375]
tabmil$roch[376]
tabMilSize
tabRochSize = matrix(0, nrow=4, ncol=5) ;
colnames(tabRochSize) <- colnames(tabEspSize);
rownames(tabRochSize) <- c("Roch_0","Roch_1","Roch_2","Roch_3");
tabmil$roch[i]
for(i in 1:376) {
for(k in 1:5){
tabRochSize[tabmil$roch[i],k]=tabRochSize[tabmil$roch[i],k]+tabMilSize[i,k];
}
};
tabRochSize
tabmil$roch[376]
tabRochSize = matrix(0, nrow=4, ncol=5) ;
colnames(tabRochSize) <- colnames(tabEspSize);
rownames(tabRochSize) <- c("Roch_0","Roch_1","Roch_2","Roch_3");
tabmil$roch[i]
tabmil$roch
tabmil$roch
tabRochSize
tabMilSize
tabmil$roch
tabmil$roch[1]
tabmil$roch[1]
tabRochSize
tabMilSize
for(i in 1:376) {
for(k in 1:5){
tabRochSize[tabmil$roch[i]+1,k]=tabRochSize[tabmil$roch[i],k]+tabMilSize[i,k];
}
};
tabmil$roch[1]
tabRochSize
tabMilSize
for(i in 1:376) {
for(k in 1:5){
tabRochSize[(tabmil$roch[i])+1,k]=tabRochSize[(tabmil$roch[i])+1,k]+tabMilSize[i,k];
}
};
tabRochSize
sum(tabMilSize[1])
tabRochSize[1]
[1]
tabMilSize[,1]
sum(tabMilSize[,1])
tabRochSize
sum(tabMilSize[,4])
sum(tabMilSize[,5])
resRoch=chisq.test(tabRochSize);
resRoch$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
resRoch; # p-value = 9.692e-05 < 0.05 on ne peut pas dire que les variables sont indépendantes.
afc1Roch=dudi.coa(tabRochSize);
names(afc1Roch);
sum(afc1Roch$eig)*sum(tabRochSize);
afc1Roch$eig[1]/sum(afc1Roch$eig)+afc1Roch$eig[2]/sum(afc1Roch$eig);# 70% d'info conservée
scatter(afc1Roch);# On voit ici la participation de chaque variable à l'effet de dépendance
# ACM -> Pour trouver la position des individus qui maximise les pourcentages
# de varible expliquée,en moyenne, pour toutes les variables quantitatives
tabmil;
tabmil$roch <- factor(tabmil$roch)
acm2=dudi.acm(tabmil$roch);
tabmil$roch;
scatter(afc1Roch);# On voit ici la participation de chaque variable à l'effet de dépendance
# Table Milieu -> Altitude 376 x 2
altitude
# Trouver le nombre d'altitude différents par milieu
altName=c()
alt=0;
nbAlt=0;
for(i in 1:376) {
if(altitude[i,]>alt)
{
alt=altitude[i,];
# créer un vecteur pour nommer les lignes(altitudes)
altName=append(altName,alt ,after=length(altName));
nbAlt=nbAlt+1;
}
};
nbAlt
altName
# On trouve 183 Altitude différentes
# Table Altitude -> Taille 183 x 5
tabAltSize = matrix(0, nrow=183, ncol=5) ;
colnames(tabAltSize) <- colnames(tabEspSize);
rownames(tabAltSize) <- altName;
tabAltSize[183,5]
alt=0;
nbAlt=0;
for(i in 1:376) {
for(k in 1:5){
if(altitude[i,]>alt)
{
alt=altitude[i,];
nbAlt=nbAlt+1;
}
tabAltSize[nbAlt,k]=tabAltSize[nbAlt,k]+tabMilSize[i,k];
}
};
tabAltSize
# Test de chi2 test si on peut dire que les variables sont independantes
res=chisq.test(tabAltSize);
res$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
res; # p-value = 9.692e-05 < 0.05 on ne peut pas dire que les variables sont indépendantes.
# AFC
afc1=dudi.coa(tabAltSize);
names(afc1);
sum(afc1$eig)*sum(tabAltSize);
afc1$eig[1]/sum(afc1$eig)+afc1$eig[2]/sum(afc1$eig);# 70% d'info conservée
scatter(afc1);# On voit ici la participation de chaque variable à l'effet de dépendance
# ACM -> Pour trouver la position des individus qui maximise les pourcentages
# de varible expliquée,en moyenne, pour toutes les variables quantitatives
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
###################################################
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$roch <- factor(tabmilTranch$roch)
tabmilTranch$habi <- factor(tabmilTranch$habi)
tabmilTranch$eau <- factor(tabmilTranch$eau)
tabmilTranch$neig <- factor(tabmilTranch$neig)
tabmilTranch$pent <- factor(tabmilTranch$pent)
tabmilTranch$arbrp <- factor(tabmilTranch$arbrp)
tabmilTranch$arbrf <- factor(tabmilTranch$arbrf)
tabmilTranch$arbup <- factor(tabmilTranch$arbup)
tabmilTranch$arbuf <- factor(tabmilTranch$arbuf)
tabmilTranch$buip <- factor(tabmilTranch$buip)
tabmilTranch$herb <- factor(tabmilTranch$herb)
tabmilTranch$Alti <- factor(tabmilTranch$Alti)
tabmilTranch$buif <- factor(tabmilTranch$buif)
acm2=dudi.acm(tabmilTranch);
names(acm2);
scatter.dudi(acm2);
acm2=dudi.acm(tabmilTranch$Alti);
2
acm2=dudi.acm(tabmilTranch$Alti + tabmil$roch);
acm2=dudi.acm(cbin(tabmilTranch$Alti, tabmil$roch);
acm2=dudi.acm(cbin(tabmilTranch$Alti, tabmil$roch));
acm2=dudi.acm(cbind(tabmilTranch$Alti, tabmil$roch));
acm2=dudi.acm(cbind(tabmilTranch$Alti, tabmilTranch$roch));
tabmilTranch$phot <- factor(tabmilTranch$phot)
tabmilTranch$roch <- factor(tabmilTranch$roch)
tabmilTranch$habi <- factor(tabmilTranch$habi)
tabmilTranch$neig <- factor(tabmilTranch$neig)
tabmilTranch$eau <- factor(tabmilTranch$eau)
tabmilTranch$pent <- factor(tabmilTranch$pent)
tabmilTranch$arbrp <- factor(tabmilTranch$arbrp)
tabmilTranch$arbrf <- factor(tabmilTranch$arbrf)
tabmilTranch$arbup <- factor(tabmilTranch$arbup)
tabmilTranch$arbuf <- factor(tabmilTranch$arbuf)
tabmilTranch$buip <- factor(tabmilTranch$buip)
tabmilTranch$buif <- factor(tabmilTranch$buif)
tabmilTranch$herb <- factor(tabmilTranch$herb)
tabmilTranch$Alti <- factor(tabmilTranch$Alti)
acm2=dudi.acm(cbind(tabmilTranch$Alti, tabmilTranch$roch));
tab$roch <- factor(tab$roch)
tab=cbind(tabmilTranch$Alti, tabmilTranch$roch)
tab$roch <- factor(tab$roch)
tab[1] <- factor(tab[1])
tab[2] <- factor(tab[2])
acm2=dudi.acm(tab);
tab
acm2=dudi.acm(tabmilTranch);
names(acm2);
scatter.dudi(acm2);
scatter(acm2);
setwd("~/MABS/Analyse_Multivariée/projetAM");
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil4=tabmil;
tabmil2=tabmil[,2:14];
tabmil=cbind(tabmil2, altitude);
cca1 = cca(tabsp,tabmil);
names(cca1);
s.corcircle(cca1$as);
s.label(cca1$l1, clab = 0, cpoi = 1.5);
s.label(cca1$co, add.plot=TRUE);
s.arrow(cca1$fa);
s.match(cca1$li, cca1$ls, clab=0.5);
tabArbrpSize = matrix(0, nrow=4, ncol=5) ;
tabmil$arbrp[376]
tabmil$arbrp
tabArbrpSize = matrix(0, nrow=4, ncol=5) ;
tabArbrpSize = matrix(0, nrow=4, ncol=5) ;
colnames(tabArbrpSize) <- colnames(tabEspSize);
rownames(tabArbrpSize) <- c("Arbrp_0","Arbrp_1","Arbrp_2","Arbrp_3");
for(i in 1:376) {
for(k in 1:5){
tabArbrpSize[(tabmil$arbrp[i])+1,k]=tabArbrpSize[(tabmil$arbrp[i])+1,k]+tabMilSize[i,k];
}
};
tabArbrpSize
tabRochSize
resArbrp=chisq.test(tabArbrpSize);
resArbrp$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
afc1Arbrp=dudi.coa(tabArbrpSize);
names(afc1Roch);
names(afc1Arbrp);
sum(afc1Arbrp$eig)*sum(tabArbrpSize);
afc1Arbrp$eig[1]/sum(afc1Arbrp$eig)+afc1Arbrp$eig[2]/sum(afc1Arbrp$eig);# 99,5% d'info conservée
afc1Arbrp$eig[1]/sum(afc1Arbrp$eig);# 99,5% d'info conservée
afc1Arbrp=dudi.coa(tabArbrpSize);
names(afc1Arbrp);
sum(afc1Arbrp$eig)*sum(tabArbrpSize);
afc1Arbrp$eig[1]/sum(afc1Arbrp$eig);# 99,5% d'info conservée
afc2Arbrp=dudi.coa(tabArbrpSize);
sum(afc2Arbrp$eig)*sum(tabArbrpSize);
afc2Arbrp$eig[1]/sum(afc2Arbrp$eig)+afc2Arbrp$eig[2]/sum(afc2Arbrp$eig);# 99,5% d'info conservée
scatter(afc1Roch);# On voit ici la participation de chaque variable à l'effet de dépendance
scatter(afc2Roch);# On voit ici la participation de chaque variable à l'effet de dépendance
scatter(afc2Roch);# On voit ici la participation de chaque variable à l'effet de dépendance
scatter(afc1Arbrp);# On voit ici la participation de chaque variable à l'effet de dépendance
resArbrp=chisq.test(tabArbrpSize);
resArbrp$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
resArbrp; # p-value = 2.2e-16 < 0.05 on ne peut pas dire que les variables sont indépendantes.
# AFC
# La je ne sais pas trop combien mettre psq en prennant
# 2 composantes principale ça ne nous donne que 2% de plus
afc1Arbrp=dudi.coa(tabArbrpSize);
names(afc1Arbrp);
sum(afc1Arbrp$eig)*sum(tabArbrpSize);
afc1Arbrp$eig[1]/sum(afc1Arbrp$eig);# 99,5% d'info conservée
afc2Arbrp=dudi.coa(tabArbrpSize);
sum(afc2Arbrp$eig)*sum(tabArbrpSize);
afc2Arbrp$eig[1]/sum(afc2Arbrp$eig)+afc2Arbrp$eig[2]/sum(afc2Arbrp$eig);# 99,5% d'info conservée
scatter(afc1Arbrp);# On voit ici la participation de chaque variable à l'effet de dépendance
afc1Roch
afc1Arbrp
scatter(afc2Arbrp);# On voit ici la participation de chaque variable à l'effet de dépendance
s.corcircle(cca1$as);
s.label(cca1$l1, clab = 0, cpoi = 1.5);
s.label(cca1$co, add.plot=TRUE);
s.arrow(cca1$fa);
tabmil$phot
tabMilSize
tabmil$phot
tabPhotSize = matrix(0, nrow=5, ncol=5) ;
colnames(tabPhotSize) <- colnames(tabEspSize);
colnames(tabPhotSize) <- colnames(tabEspSize);
rownames(tabPhotSize) <- c("Phot_1","Phot_2","Phot_3","Phot_4","Phot_5");
for(i in 1:376) {
for(k in 1:5){
tabPhotSize[(tabmil$phot[i])+1,k]=tabPhotSize[(tabmil$phot[i])+1,k]+tabMilSize[i,k];
}
};
for(i in 1:376) {
for(k in 1:5){
tabPhotSize[(tabmil$phot[i]),k]=tabPhotSize[(tabmil$phot[i]),k]+tabMilSize[i,k];
}
};
tabPhotSize
# Test de chi2 test si on peut dire que les variables sont independantes
resPhot=chisq.test(tabPhotSize);
resPhot$expected; # Ce qu'on aurai attendu si 2 variable indépendantes
resPhot; # p-value = 2.2e-16 < 0.05 on ne peut pas dire que les variables sont indépendantes.
afc2Phot=dudi.coa(tabPhotSize);
sum(afc2Phot$eig)*sum(tabPhotSize);
afc2Phot$eig[1]/sum(afc2Phot$eig)+afc2Phot$eig[2]/sum(afc2Phot$eig);# 99,5% d'info conservée
scatter(afc2Phot);# On voit ici la participation de chaque variable à l'effet de dépendance
scatter(afc1);# On voit ici la participation de chaque variable à l'effet de dépendance
tabAltSize
tabmilTranch;
rownames(tabAltSize) <- c("Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSize = matrix(0, nrow=5, ncol=5) ;
tabAltSizeTranch = matrix(0, nrow=5, ncol=5) ;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
rownames(tabAltSizeTranch) <- c("Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSizeTranch
tabmilTranch;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
tabAltSizeTranch = matrix(0, nrow=5, ncol=5) ;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
rownames(tabAltSizeTranch) <- c("Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSizeTranch
tabmilTranch;
for(i in 1:376) {
for(k in 1:5){
tabAltSizeTranch[tabmilTranch$Alti[i],k]=tabAltSizeTranch[tabmilTranch$Alti[i],k]+tabMilSize[i,k];
}
};
tabmilTranch$Alti[i]
tabmilTranch$Alti[376]
tabmilTranch$Alti[1]
tabmilTranch$Alti
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
tabAltSizeTranch = matrix(0, nrow=6, ncol=5) ;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
rownames(tabAltSizeTranch) <- c("Alt_0","Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSizeTranch
tabmilTranch$Alti
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]+1-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
tabmil;
limiteBasse = altitude[1,];
tailleGroup = (altitude[375,]-limiteBasse)/5;
tailleGroup # 442 Tranche altitudinale
tabmilTranch = tabmil;
nbAlt=0;
for(i in 1:376) {
trancheAlt = round((tabmil[i,14]-limiteBasse)/tailleGroup);
tabmilTranch[i,14]=trancheAlt;
};
tabmilTranch;
tabAltSizeTranch = matrix(0, nrow=6, ncol=5) ;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
rownames(tabAltSizeTranch) <- c("Alt_0","Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSizeTranch
tabmilTranch$Alti
for(i in 1:376) {
for(k in 1:5){
tabAltSizeTranch[tabmilTranch$Alti[i],k]=tabAltSizeTranch[tabmilTranch$Alti[i],k]+tabMilSize[i,k];
}
};
tabAltSize
tabAltSizeTranch
tabAltSizeTranch = matrix(0, nrow=6, ncol=5) ;
colnames(tabAltSizeTranch) <- colnames(tabEspSize);
rownames(tabAltSizeTranch) <- c("Alt_0","Alt_1","Alt_2","Alt_3","Alt_4","Alt_5");
tabAltSizeTranch
tabmilTranch$Alti
for(i in 1:376) {
for(k in 1:5){
tabAltSizeTranch[tabmilTranch$Alti[i]+1,k]=tabAltSizeTranch[tabmilTranch$Alti[i]+1,k]+tabMilSize[i,k];
}
};
tabAltSizeTranch
afc1Tranch=dudi.coa(tabAltSizeTranch);
names(afc1Tranch);
sum(afc1Tranch$eig)*sum(tabAltSizeTranch);
afc1Tranch$eig[1]/sum(afc1Tranch$eig)+afc1Tranch$eig[2]/sum(afc1Tranch$eig);# 70% d'info conservée
scatter(afc1Tranch);# On voit ici la participation de chaque variable à l'effet de dépendance
setwd("~/MABS/Analyse_Multivariée/projetAM");
library(ade4);
tabsp=read.table("tabsp.txt", header=TRUE);
tabtraits=read.table("tabtraits.txt", header=TRUE);
tabmil=read.table("tabmil.txt", header=TRUE);
nom=read.table("noms.txt", header=TRUE);
altitude=read.table("altitude.txt", header=TRUE);
tabmil4=tabmil;
tabmil2=tabmil[,2:14];
tabmil=cbind(tabmil2, altitude);
cca1 = cca(tabsp,tabmil);
names(cca1);
s.corcircle(cca1$as);
s.label(cca1$l1, clab = 0, cpoi = 1.5);
s.label(cca1$co, add.plot=TRUE);
s.arrow(cca1$fa);
s.match(cca1$li, cca1$ls, clab=0.5);
install.packages("vegan");
cca2=cca(tabsp, tabmil);
cca2=cca(tabsp, tabmil);
plot(cca2);
cca3=cca(tabsp~Alti + phot + roch,tabmil );
plot(cca3);
anova(cca3);
cca4=cca(tabsp~Alti + phot,tabmil );
plot(cca4);
anova(cca4);
cca3=cca(tabsp~Alti + phot + roch,tabmil );
library(vegan);
plot(cca2);
cca3=cca(tabsp~Alti + phot + roch,tabmil );
plot(cca3);
anova(cca3);
cca4=cca(tabsp~Alti + phot,tabmil );
plot(cca4);
anova(cca4);
cca5=cca(tabsp~Alti + phot + arbrp,tabmil );
plot(cca5);
anova(cca5);
anova(cca(tabsp~herb + Condition(Alti + roch),tabmil ))
#########################################
tabmil
altitude
tabtraits
# Table Espèces -> Taille 98 x 5
tabtraits[,15:19]
tabEspSize = tabtraits[,15:19];
tabEspSize
# Table Milieu -> Présence espèce 376 x 98
tabsp[376,]
# Table Milieu -> Taille 376 x 5
tabMilSize = matrix(0, nrow=376, ncol=5) ;
colnames(tabMilSize) <- colnames(tabEspSize)
rownames(tabMilSize) <- rownames(altitude)
tabMilSize
for(i in 1:376) {
for(j in 1:98){
if(tabsp[i,j]==1){
k=1;
while(k<5 && tabEspSize[j,k]==0){
k=k+1;
}
tabMilSize[i,k]=tabMilSize[i,k]+1;
}
}
};
tabMilSize
###################################################
# Effet de l'altitude sur la taille
###################################################
# Table Milieu -> Altitude 376 x 2
altitude
# Trouver le nombre d'altitude différents par milieu
altName=c()
alt=0;
nbAlt=0;
for(i in 1:376) {
if(altitude[i,]>alt)
{
alt=altitude[i,];
